Title: "Generate a Fully Functional React Web App for a Skill & Item Exchange Platform"

Description:

> Generate a React-based web application that allows university students to exchange skills and items. The app should have a modern UI, a responsive design, and a clean folder structure using best practices. The pages should be well-structured, with proper navigation, authentication, and interactive components.




---

📌 Features & Requirements

1️⃣ Project Setup

✅ Use Vite + React for fast performance.
✅ Use React Router for navigation.
✅ Implement TailwindCSS for styling.
✅ Folder structure should be organized, with separate pages/ and components/.


---

2️⃣ Navigation & Routing

✅ Implement a navigation bar that includes:

Home (/)

Dashboard (/dashboard)

Skill Exchange (/skills)

Item Exchange (/items)

Profile (/profile)

Chat (/chat)

Notifications (/notifications)


✅ Ensure React Router is properly configured in App.jsx.


---

3️⃣ Authentication

✅ Use Firebase Authentication (Google Sign-In).
✅ If the user is not logged in, redirect them to the Login page.
✅ Store user details (name, email, profile picture) in Firebase.


---

4️⃣ Home Page (Home.jsx)

✅ Welcome section with a brief intro and Join Now button.
✅ Responsive hero image/illustration.
✅ Short sections explaining Skill & Item Exchange.


---

5️⃣ Dashboard Page (Dashboard.jsx)

✅ Show the user’s profile picture & name.
✅ Sections for "Browse Skills" and "Browse Items".
✅ Include a search bar to find specific skills/items.


---

6️⃣ Skill Exchange Page (Skills.jsx)

✅ Users can post skills they are offering & learning.
✅ Search & filter to find specific skills.
✅ Clicking a skill opens details + an option to request exchange.


---

7️⃣ Item Exchange Page (Items.jsx)

✅ Users can post items available for exchange (books, jackets, etc.).
✅ Upload images for items.
✅ Users can request an exchange.


---

8️⃣ Profile Page (Profile.jsx)

✅ Display user information (profile picture, skills offered/learning).
✅ Edit Profile functionality (name, bio, contact details).


---

9️⃣ Chat Page (Chat.jsx)

✅ Implement real-time messaging using Firebase Firestore.
✅ List chat conversations with other users.
✅ Enable sending text & images.


---

🔹 Additional Features

✅ Dark Mode support.
✅ Mobile-friendly layout.
✅ Admin Panel (Optional): For moderating reports/spam.


---

📌 Expected Folder Structure

/src  
│── /assets (images, icons)  
│── /components (reusable UI elements)  
│── /config (Firebase config)  
│── /pages (All main pages)  
│── /styles (CSS files)  
│── App.jsx  
│── main.jsx  
│── index.html  
│── package.json  
│── tailwind.config.cjs


---

🎯 Final Expectations

Generate fully functional JSX files for each page.

Ensure proper routing, state management, and authentication.

All UI elements should be clean, modern, and user-friendly.



---

This prompt will instruct DeepSig R1 to generate a well-structured React app with all the features you need. 🚀